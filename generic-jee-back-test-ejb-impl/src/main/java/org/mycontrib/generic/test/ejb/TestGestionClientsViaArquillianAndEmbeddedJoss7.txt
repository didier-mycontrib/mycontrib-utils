package tp.myapp.test;

import javax.ejb.EJB;

import junit.framework.Assert;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.formatter.Formatters;
import org.jboss.shrinkwrap.api.spec.JavaArchive;
import org.jboss.shrinkwrap.resolver.api.DependencyResolvers;
import org.jboss.shrinkwrap.resolver.api.maven.MavenDependencyResolver;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import tp.myapp.minibank.impl.domain.ejb.itf.GestionClientsLocal;
import tp.myapp.minibank.itf.domain.dto.Client;
import tp.myapp.minibank.itf.domain.service.GestionClients;
	
//NB: ce test utisant EmbeddedJoss7 nécessite le profil -P arquillian-jbossas-managed

@RunWith(Arquillian.class)
public class TestGestionClientsViaArquillianAndEmbeddedJoss7 {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(TestGestionClientsViaArquillianAndEmbeddedJoss7.class);
	
    @EJB
	private GestionClientsLocal service;
	
    @Deployment
    public static JavaArchive createDeployment() {
    	
    	MavenDependencyResolver resolver = DependencyResolvers
    		     .use(MavenDependencyResolver.class)
    		     .loadMetadataFromPom("pom.xml");
    	
    	final JavaArchive jar = ShrinkWrap.create(JavaArchive.class /*,"minibank-jee6-ejb.jar"*/) 
    			.addPackages(true,"org.mycontrib.generic")
    			/*.addPackage("org.mycontrib.generic.converter")
    			.addPackage("org.mycontrib.generic.persistence")*/
    			.addPackages(true,"tp.myapp.minibank.impl.persistence")
    			/* 	.addPackage("tp.myapp.minibank.impl.persistence.entity")
            	.addPackage("tp.myapp.minibank.impl.persistence.dao")
            	.addPackage("tp.myapp.minibank.impl.persistence.dao.jpa")*/
    			.addPackages(true,"tp.myapp.minibank.impl.domain")
            	/*.addPackage("tp.myapp.minibank.impl.domain")
            	.addPackage("tp.myapp.minibank.impl.domain.ejb.itf")
            	.addPackage("tp.myapp.minibank.impl.domain.service") */
            	.addPackages(true,"tp.myapp.minibank.itf")
            	/*.addPackage("tp.myapp.minibank.itf.domain.service")
            	.addPackage("tp.myapp.minibank.itf.domain")
            	.addPackage("tp.myapp.minibank.itf.domain.dto")*/
            	
               // .addClasses(C1.class,C2.class)
            	//.addAsLibraries(resolver.artifact("net.sf.dozer:dozer:5.3.1").resolveAsFiles()) //ok sur WebArchive.class , pas sur JavaArchive.class
                .addAsManifestResource("META-INF/persistence.xml", "persistence.xml")
    	        .addAsManifestResource("META-INF/beans.xml", "beans.xml");
    	       // .setManifest("META-INF/MANIFEST.MF");
    	
    	
    	for(JavaArchive a : resolver.artifacts("net.sf.dozer:dozer:5.3.1","org.springframework:spring-beans:3.0.5.RELEASE",
    			                               "commons-collections:commons-collections:3.2.1",
    			                               "cglib:cglib:2.2.2","org.apache.ant:ant:1.8.2",
    			                               "commons-logging:commons-logging:1.1.1",
    			                               "aspectj:aspectjweaver:1.5.4",
    			                               "org.apache.avalon.framework:avalon-framework-impl:4.3.1",
    			                               "logkit:logkit:1.3","jakarta-regexp:jakarta-regexp:1.4").resolveAs(JavaArchive.class)){
    		System.out.println("****:" + a.toString());
    		jar.merge(a);
    	}
    	        
 
        LOGGER.info(jar.toString(Formatters.VERBOSE));
 
        return jar;
    	
    }
	
	@Test
	public void testGetClientByNum(){
		try {
			Client cli = service.getClientByNum(1L);
			System.out.println("client 1 = " + cli.toString());
			Assert.assertTrue(cli.getNumero()==1L);
		} catch (Exception e) {
			e.printStackTrace();
			Assert.fail(e.getMessage());
		}
	}
	
	@Test
	public void testPasswordOfClient(){
		try {
		
			System.out.println("affectation  et verification du mot de passe new-pwd1 au client 1  :");
			service.changePasswordOfClient(1L, "new-pwd1");
			Assert.assertTrue(service.isGoodPasswordOfClient(1L, "new-pwd1"));
			System.out.println("affectation et verification du mot de passe pwd1 au client 1  :");
			service.changePasswordOfClient(1L, "pwd1");
			Assert.assertTrue(service.isGoodPasswordOfClient(1L, "pwd1"));			
		} catch (Exception e) {
			e.printStackTrace();
			Assert.fail(e.getMessage());
		}
	}
	
	
	
}

